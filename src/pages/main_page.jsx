import React, { useState, useEffect } from "react";
import Router from "../Entities/classRouter";
import PC from "../Entities/classPC";
import ConnectionTree from "../components/connection_tree";
import LeftNavBar from "../components/navbar";

export default function MainPage() {
  const [allItems, setAllItems] = useState([]); // –í—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
  const [selectedItems, setSelectedItems] = useState([]); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ/–≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
  // const [loading, setLoading] = useState(true);
  // const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
		const response = await fetch("http://127.0.0.1:8000/v1/router");
		const jsonData = await response.json()
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞—Å—Å–∞ Router
      const routers = jsonData.map((routerData) => new Router(routerData));

      setAllItems(routers);
      setSelectedItems(routers);
    };

    fetchData();
  }, []);
  // useEffect(() => {
  //   const fetchData = async () => {
  //     try {
  //       const response = await fetch("http://127.0.0.1:8000"); // üëà –ü—Ä–æ–≤–µ—Ä—å URL!

  //       if (!response.ok) {
  //         throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
  //       }

  //       const jsonData = await response.json();
  //       console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", jsonData); // üëÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç

  //       // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ jsonData –º–∞—Å—Å–∏–≤–æ–º
  //       if (Array.isArray(jsonData)) {
  //         // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤
  //         const routers = jsonData.map((routerData) => new Router(routerData));
  //         setAllItems(routers);
  //         setSelectedItems(routers);
  //       } else if (jsonData.routers && Array.isArray(jsonData.routers)) {
  //         // –ï—Å–ª–∏ backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { "routers": [...] }, –±–µ—Ä—ë–º jsonData.routers
  //         const routers = jsonData.routers.map((routerData) => new Router(routerData));
  //         setAllItems(routers);
  //         setSelectedItems(routers);
  //       } else {
  //         throw new Error("–û—à–∏–±–∫–∞: Backend –Ω–µ –≤–µ—Ä–Ω—É–ª –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö");
  //       }

  //     } catch (err) {
  //       console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
  //       setError(err.message);
  //     } finally {
  //       setLoading(false);
  //     }
  //   };

  //   fetchData();
  // }, []);

  return (
    <div style={{ display: "flex" }}>
      <LeftNavBar
        routers={selectedItems}
        onScan={(scannedItems) => {
          console.log("Scanned Items:", scannedItems);
          setSelectedItems(scannedItems); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã
        }}
      />
      <ConnectionTree
        routers={selectedItems}
        pcs={selectedItems.flatMap((router) => router.computers)} // –ü–ö –∏–∑ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤
      />
    </div>
  );
}
{/* <div style={{ display: "flex" }}>
      {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>}
      {error && <p style={{ color: "red" }}>–û—à–∏–±–∫–∞: {error}</p>}

      {!loading && !error && (
        <>
          <LeftNavBar
            routers={selectedItems}
            onScan={(scannedItems) => {
              console.log("Scanned Items:", scannedItems);
              setSelectedItems(scannedItems);
            }}
          />
          <ConnectionTree
            routers={selectedItems}
            pcs={selectedItems.flatMap((router) => router.computers)}
          />
        </>
      )}
    </div>
  );
} */}
